2022-01-26 17:49:36 Cfg4_SyRTC_0061.py 184 <module> __init__     form = TestPlatForm(18125, 18125)\n (18125, 18125) {}
2022-01-26 17:49:36 udp_loglib.py 1561 __init__ spawn         gevent.spawn(gevent.empty)   (<class 'udp_loglib.myGevent'>, <function myGevent.empty >) {}
2022-01-26 17:49:36 udp_loglib.py 1998 _set_client mPrint             mPrint('use 2 mvcu')\n ('use 2 mvcu',) {}
2022-01-26 17:49:36 udp_loglib.py 2009 gevent_join spawn         greenlet_list = [gevent.spawn(greenlet_list)]\n (<class 'udp_loglib.myGevent'>, <function confSet >) {}
2022-01-26 17:49:36 udp_loglib.py 2016 gevent_join spawn         gevent.spawn(form._log_recv, *(form.clientP, )),   (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._log_recv of <udp_loglib.TestPlatForm object >>, <udp_loglib.UdpClient object >) {}
2022-01-26 17:49:36 udp_loglib.py 2017 gevent_join spawn         gevent.spawn(form._log_recv, *(form.clientS, )),   (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._log_recv of <udp_loglib.TestPlatForm object >>, <udp_loglib.UdpClient object >) {}
2022-01-26 17:49:36 udp_loglib.py 2018 gevent_join spawn         gevent.spawn(form._serial_recv),\n (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._serial_recv of <udp_loglib.TestPlatForm object >>) {}
2022-01-26 17:49:36 udp_loglib.py 2019 gevent_join spawn         gevent.spawn(form._mib_recv),\n (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._mib_recv of <udp_loglib.TestPlatForm object >>) {}
2022-01-26 17:49:36 udp_loglib.py 2020 gevent_join spawn         gevent.spawn(form._wireshark_recv)]\n (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._wireshark_recv of <udp_loglib.TestPlatForm object >>) {}
2022-01-26 17:49:36 udp_loglib.py 2023 gevent_join joinall     gevent.joinall(default_list)\n (<class 'udp_loglib.myGevent'>, [<Greenlet >>(<bound method TestPlatForm._log_recv of <udp_logli, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._log_recv of <udp_logli, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._serial_recv of <udp_lo, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._mib_recv of <udp_logli, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._wireshark_recv of <udp, [FrameInfo(frame=<frame >, <Greenlet >>(<function confSet >, [FrameInfo(frame=<frame >]) {}
2022-01-26 17:49:36 Cfg4_SyRTC_0061.py 190 confSet respondCheck         FrameLib.respondCheck()   (<class 'udp_loglib.FrameLib'>,) {}
2022-01-26 17:49:36 udp_loglib.py 666 respondCheck mPrint                 Public.mPrint('set success')\n ('set success',) {}
2022-01-26 17:49:36 udp_loglib.py 377 run _log_recv             rt_val = func(*args, **kwargs)\n (<udp_loglib.UdpClient object >,) {}
2022-01-26 17:49:36 udp_loglib.py 1817 _log_recv mPrint         mPrint('recv start %s,%s' % client.remote)\n ('recv start 20.2.1.10,18125',) {}
2022-01-26 17:49:36 udp_loglib.py 377 run _log_recv             rt_val = func(*args, **kwargs)\n (<udp_loglib.UdpClient object >,) {}
2022-01-26 17:49:36 udp_loglib.py 1817 _log_recv mPrint         mPrint('recv start %s,%s' % client.remote)\n ('recv start 20.1.1.10,18125',) {}
2022-01-26 17:49:36 udp_loglib.py 1930 _mib_recv get_value                 self.mib.get_value('lruDefaultCode', outfile= 'auto_getmib.log', raise_error=False)\n ('lruDefaultCode',) {'outfile': 'auto_getmib.log', 'raise_error': False}
2022-01-26 17:49:36 Cfg4_SyRTC_0061.py 25 LogPath_set path_set     Log.path_set(dir_path)\n (<class 'udp_loglib.Log'>, 'c:\\Users\\test2\\Desktop\\testplaatform1025\\Master\\testplatform\\case_test\\testcase\\SyRTC/Log/Cfg4_SyRTC_0061/12') {}
2022-01-26 17:49:36 udp_loglib.py 1478 path_set mPrint         mPrint('Log path set to %s' % cls._root)\n ('Log path set to c:\\Users\\test2\\Desktop\\testplaatform1025\\Master\\testplatform\\case_test\\testcase\\SyRTC\\Log\\Cfg4_SyRTC_0061\\12/',) {}
2022-01-26 17:49:36 udp_loglib.py 1395 tag_send __init__         frame = UdpSendFrame()\n () {}
2022-01-26 17:49:36 Cfg4_SyRTC_0061.py 132 main tst_set         form.tst_set(dst_slot, Tag.tag_send('00610111'))\n ('3-8', <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:36 udp_loglib.py 1350 _set __init__         frame = UdpSendFrame()\n () {}
2022-01-26 17:49:36 udp_loglib.py 1751 tst_set tst_set             self.tst_set(slots, Conf.allFlagSet(1), False, False)\n ('3-8', <udp_loglib.UdpSendFrame object >, False, False) {}
2022-01-26 17:49:36 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:36 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.2.1.10'}
2022-01-26 17:49:36 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.1.1.10'}
2022-01-26 17:49:36 udp_loglib.py 1912 _wireshark_recv start                 p_new = self.wireShark.start(outfile='wireshark_recv.pcapng', block=False)\n () {'outfile': 'wireshark_recv.pcapng', 'block': False}
2022-01-26 17:49:36 wireShark.py 103 start mPrint             self.print('%s' % self.get_path(outfile))\n ('c:\\Users\\test2\\Desktop\\testplaatform1025\\Master\\testplatform\\case_test\\testcase\\SyRTC\\Log\\Cfg4_SyRTC_0061\\12/wireshark_recv.pcapng',) {}
2022-01-26 17:49:36 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:36 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:37 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 9) {'snmpip': '20.2.1.10'}
2022-01-26 17:49:37 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 9) {'snmpip': '20.1.1.10'}
2022-01-26 17:49:37 serialread.py 121 open_all funclog.write             funclog.wirte(port, outfile)\n ('COM23', None) {}
2022-01-26 17:49:37 serialread.py 121 open_all funclog.write             funclog.wirte(port, outfile)\n ('COM15', None) {}
2022-01-26 17:49:37 udp_loglib.py 1850 _serial_recv mPrint                     mPrint('start listen', self._SerialRead.queue_dict.keys())\n ('start listen', dict_keys(['COM23', 'COM15'])) {}
2022-01-26 17:49:37 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:37 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:37 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff0e320f000000000300010001fb33') {}
2022-01-26 17:49:37 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff0c320f00000000030001000171f5') {}
2022-01-26 17:49:37 wireShark.py 73 __find_Conn mPrint             self.print('“‘Ã´Õ¯  ≈‰∆˜: %s' % self._Conn)\n ('“‘Ã´Õ¯  ≈‰∆˜: “‘Ã´Õ¯',) {}
2022-01-26 17:49:38 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff10320f00000000030001000169b6') {}
2022-01-26 17:49:38 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:38 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:38 udp_loglib.py 1930 _mib_recv get_value                 self.mib.get_value('lruDefaultCode', outfile= 'auto_getmib.log', raise_error=False)\n ('lruDefaultCode',) {'outfile': 'auto_getmib.log', 'raise_error': False}
2022-01-26 17:49:38 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.2.1.10'}
2022-01-26 17:49:38 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.1.1.10'}
2022-01-26 17:49:38 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff12320f000000000300010001e370') {}
2022-01-26 17:49:38 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 9) {'snmpip': '20.2.1.10'}
2022-01-26 17:49:38 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 9) {'snmpip': '20.1.1.10'}
2022-01-26 17:49:39 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff16320f000000000300010001e6dd') {}
2022-01-26 17:49:39 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff14320f0000000003000100016c1b') {}
2022-01-26 17:49:39 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:39 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:39 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff0e300f0000610111000000007293') {}
2022-01-26 17:49:40 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:40 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:40 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff0c300f000061011100000000f855') {}
2022-01-26 17:49:40 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff10300f000061011100000000e016') {}
2022-01-26 17:49:40 udp_loglib.py 1779 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-01-26 17:49:40 udp_loglib.py 1785 tst_set respondCheck             FrameLib.respondCheck()\n (<class 'udp_loglib.FrameLib'>,) {}
2022-01-26 17:49:40 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff12300f0000610111000000006ad0') {}
2022-01-26 17:49:41 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff16300f0000610111000000006f7d') {}
2022-01-26 17:49:41 udp_loglib.py 838 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff14300f000061011100000000e5bb') {}
2022-01-26 17:49:41 udp_loglib.py 666 respondCheck mPrint                 Public.mPrint('set success')\n ('set success',) {}
2022-01-26 17:49:41 Cfg4_SyRTC_0061.py 133 main __init__         sims = Simulator('cfg4')\n ('cfg4',) {}
2022-01-26 17:49:41 Cfg4_SyRTC_0061.py 135 main openwith             sims.openwith(i, 'E')\n (1, 'E') {}
2022-01-26 17:49:43 Cfg4_SyRTC_0061.py 135 main openwith             sims.openwith(i, 'E')\n (2, 'E') {}
2022-01-26 17:49:44 Cfg4_SyRTC_0061.py 135 main openwith             sims.openwith(i, 'E')\n (3, 'E') {}
2022-01-26 17:49:46 Cfg4_SyRTC_0061.py 135 main openwith             sims.openwith(i, 'E')\n (4, 'E') {}
2022-01-26 17:49:47 Cfg4_SyRTC_0061.py 135 main openwith             sims.openwith(i, 'E')\n (5, 'E') {}
2022-01-26 17:49:49 Cfg4_SyRTC_0061.py 135 main openwith             sims.openwith(i, 'E')\n (6, 'E') {}
2022-01-26 17:50:40 Cfg4_SyRTC_0061.py 194 confSet normal_end         Public.normal_end()\n (<class 'udp_loglib.Public'>,) {}
2022-01-26 17:50:40 udp_loglib.py 88 normal_end mPrint         cls.mPrint('normal end')\n ('normal end',) {}
2022-01-26 17:50:40 Cfg4_SyRTC_0061.py 195 confSet mPrint         Public.mPrint('exit')\n ('exit',) {}
2022-01-26 17:50:41 udp_loglib.py 1930 _mib_recv get_value                 self.mib.get_value('lruDefaultCode', outfile= 'auto_getmib.log', raise_error=False)\n ('lruDefaultCode',) {'outfile': 'auto_getmib.log', 'raise_error': False}
2022-01-26 17:50:41 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.2.1.10'}
2022-01-26 17:50:41 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.1.1.10'}
2022-01-26 17:50:41 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 9) {'snmpip': '20.2.1.10'}
2022-01-26 17:50:41 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 9) {'snmpip': '20.1.1.10'}
