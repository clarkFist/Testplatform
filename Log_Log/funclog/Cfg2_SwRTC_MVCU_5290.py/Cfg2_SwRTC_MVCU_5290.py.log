2022-11-01 17:24:39 Cfg2_SwRTC_MVCU_5290.py 49 <module> __init__     form = TestPlatForm(18125, 18125)\n (18125, 18125) {}
2022-11-01 17:24:39 udp_loglib.py 1562 __init__ spawn         gevent.spawn(gevent.empty)   (<class 'udp_loglib.myGevent'>, <function myGevent.empty >) {}
2022-11-01 17:24:40 udp_loglib.py 1997 _set_client mPrint                 mPrint('use mvcu p')\n ('use mvcu p',) {}
2022-11-01 17:24:40 udp_loglib.py 2012 gevent_join spawn         greenlet_list = [gevent.spawn(greenlet_list)]\n (<class 'udp_loglib.myGevent'>, <function confSet >) {}
2022-11-01 17:24:40 udp_loglib.py 2019 gevent_join spawn         gevent.spawn(form._log_recv, *(form.clientP, )),   (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._log_recv of <udp_loglib.TestPlatForm object >>, <udp_loglib.UdpClient object >) {}
2022-11-01 17:24:40 udp_loglib.py 2020 gevent_join spawn         gevent.spawn(form._log_recv, *(form.clientS, )),   (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._log_recv of <udp_loglib.TestPlatForm object >>, <udp_loglib.UdpClient object >) {}
2022-11-01 17:24:40 udp_loglib.py 2021 gevent_join spawn         gevent.spawn(form._serial_recv),\n (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._serial_recv of <udp_loglib.TestPlatForm object >>) {}
2022-11-01 17:24:40 udp_loglib.py 2022 gevent_join spawn         gevent.spawn(form._mib_recv),\n (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._mib_recv of <udp_loglib.TestPlatForm object >>) {}
2022-11-01 17:24:40 udp_loglib.py 2023 gevent_join spawn         gevent.spawn(form._wireshark_recv)]\n (<class 'udp_loglib.myGevent'>, <bound method TestPlatForm._wireshark_recv of <udp_loglib.TestPlatForm object >>) {}
2022-11-01 17:24:40 udp_loglib.py 2026 gevent_join joinall     gevent.joinall(default_list)\n (<class 'udp_loglib.myGevent'>, [<Greenlet >>(<bound method TestPlatForm._log_recv of <udp_logli, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._log_recv of <udp_logli, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._serial_recv of <udp_lo, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._mib_recv of <udp_logli, [FrameInfo(frame=<frame >, <Greenlet >>(<bound method TestPlatForm._wireshark_recv of <udp, [FrameInfo(frame=<frame >, <Greenlet >>(<function confSet >, [FrameInfo(frame=<frame >]) {}
2022-11-01 17:24:40 Cfg2_SwRTC_MVCU_5290.py 53 confSet respondCheck         FrameLib.respondCheck()   (<class 'udp_loglib.FrameLib'>,) {}
2022-11-01 17:24:40 udp_loglib.py 667 respondCheck mPrint                 Public.mPrint('set success TP Ver-3.0.5')\n ('set success TP Ver-3.0.5',) {}
2022-11-01 17:24:40 udp_loglib.py 378 run _log_recv             rt_val = func(*args, **kwargs)\n (<udp_loglib.UdpClient object >,) {}
2022-11-01 17:24:40 udp_loglib.py 1820 _log_recv mPrint         mPrint('recv start %s,%s' % client.remote)\n ('recv start 20.2.1.10,18125',) {}
2022-11-01 17:24:40 udp_loglib.py 378 run _log_recv             rt_val = func(*args, **kwargs)\n (<udp_loglib.UdpClient object >,) {}
2022-11-01 17:24:40 udp_loglib.py 1820 _log_recv mPrint         mPrint('recv start %s,%s' % client.remote)\n ('recv start 20.1.1.10,18125',) {}
2022-11-01 17:24:40 udp_loglib.py 1933 _mib_recv get_value                 self.mib.get_value('lruDefaultCode', outfile= 'auto_getmib.log', raise_error=False)\n ('lruDefaultCode',) {'outfile': 'auto_getmib.log', 'raise_error': False}
2022-11-01 17:24:40 udp_loglib.py 1396 tag_send __init__         frame = UdpSendFrame()\n () {}
2022-11-01 17:24:40 Cfg2_SwRTC_MVCU_5290.py 32 step1 tst_set     form.tst_set('2', Tag.tag_send('52900111'))\n ('2', <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:40 udp_loglib.py 1351 _set __init__         frame = UdpSendFrame()\n () {}
2022-11-01 17:24:40 udp_loglib.py 1754 tst_set tst_set             self.tst_set(slots, Conf.allFlagSet(1), False, False)\n ('2', <udp_loglib.UdpSendFrame object >, False, False) {}
2022-11-01 17:24:40 udp_loglib.py 1782 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:40 udp_loglib.py 1782 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:40 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.2.1.10'}
2022-11-01 17:24:40 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.1.1.10'}
2022-11-01 17:24:40 udp_loglib.py 1915 _wireshark_recv start                 p_new = self.wireShark.start(outfile='wireshark_recv.pcapng', block=False)\n () {'outfile': 'wireshark_recv.pcapng', 'block': False}
2022-11-01 17:24:40 wireShark.py 103 start mPrint             self.print('%s' % self.get_path(outfile))\n ('Log_Log/default/wireshark_recv.pcapng',) {}
2022-11-01 17:24:41 udp_loglib.py 839 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff02320f000000000300010001f5c4') {}
2022-11-01 17:24:41 wireShark.py 73 __find_Conn mPrint             self.print('“‘Ã´Õ¯  ≈‰∆˜: %s' % self._Conn)\n ('“‘Ã´Õ¯  ≈‰∆˜: blue',) {}
2022-11-01 17:24:41 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 30) {'snmpip': '20.2.1.10'}
2022-11-01 17:24:41 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 30) {'snmpip': '20.1.1.10'}
2022-11-01 17:24:41 udp_loglib.py 1788 tst_set respondCheck             FrameLib.respondCheck()\n (<class 'udp_loglib.FrameLib'>,) {}
2022-11-01 17:24:42 udp_loglib.py 839 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff02300f005290011100000000af5f') {}
2022-11-01 17:24:42 serialread.py 121 open_all funclog.write             funclog.wirte(port, outfile)\n ('COM11', None) {}
2022-11-01 17:24:42 serialread.py 121 open_all funclog.write             funclog.wirte(port, outfile)\n ('COM6', None) {}
2022-11-01 17:24:42 udp_loglib.py 1853 _serial_recv mPrint                     mPrint('start listen', self._SerialRead.queue_dict.keys())\n ('start listen', dict_keys(['COM11', 'COM6'])) {}
2022-11-01 17:24:43 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (3, 2.1575536727905273) {}
2022-11-01 17:24:43 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 3, 2.16) {}
2022-11-01 17:24:43 udp_loglib.py 667 respondCheck mPrint                 Public.mPrint('set success TP Ver-3.0.5')\n ('set success TP Ver-3.0.5',) {}
2022-11-01 17:24:43 udp_loglib.py 1396 tag_send __init__         frame = UdpSendFrame()\n () {}
2022-11-01 17:24:43 Cfg2_SwRTC_MVCU_5290.py 33 step1 tst_set     form.tst_set('2', Tag.tag_send('52900211'))\n ('2', <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:43 udp_loglib.py 1351 _set __init__         frame = UdpSendFrame()\n () {}
2022-11-01 17:24:43 udp_loglib.py 1754 tst_set tst_set             self.tst_set(slots, Conf.allFlagSet(1), False, False)\n ('2', <udp_loglib.UdpSendFrame object >, False, False) {}
2022-11-01 17:24:43 udp_loglib.py 1782 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:43 udp_loglib.py 1782 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:44 udp_loglib.py 839 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff02320f000000000300010001f5c4') {}
2022-11-01 17:24:44 udp_loglib.py 1788 tst_set respondCheck             FrameLib.respondCheck()\n (<class 'udp_loglib.FrameLib'>,) {}
2022-11-01 17:24:44 udp_loglib.py 839 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff02300f00529002110000000061bf') {}
2022-11-01 17:24:47 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (4, 2.5886166095733643) {}
2022-11-01 17:24:47 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 4, 2.59) {}
2022-11-01 17:24:47 udp_loglib.py 667 respondCheck mPrint                 Public.mPrint('set success TP Ver-3.0.5')\n ('set success TP Ver-3.0.5',) {}
2022-11-01 17:24:47 udp_loglib.py 1396 tag_send __init__         frame = UdpSendFrame()\n () {}
2022-11-01 17:24:47 Cfg2_SwRTC_MVCU_5290.py 34 step1 tst_set     form.tst_set('2', Tag.tag_send('52900311'))\n ('2', <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:47 udp_loglib.py 1351 _set __init__         frame = UdpSendFrame()\n () {}
2022-11-01 17:24:47 udp_loglib.py 1754 tst_set tst_set             self.tst_set(slots, Conf.allFlagSet(1), False, False)\n ('2', <udp_loglib.UdpSendFrame object >, False, False) {}
2022-11-01 17:24:47 udp_loglib.py 1782 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:47 udp_loglib.py 1782 tst_set resigeter                 FrameLib.resigeter(frame.copy())\n (<class 'udp_loglib.FrameLib'>, <udp_loglib.UdpSendFrame object >) {}
2022-11-01 17:24:48 udp_loglib.py 839 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff02320f000000000300010001f5c4') {}
2022-11-01 17:24:48 udp_loglib.py 1788 tst_set respondCheck             FrameLib.respondCheck()\n (<class 'udp_loglib.FrameLib'>,) {}
2022-11-01 17:24:49 udp_loglib.py 839 recv _reply_Recv             Reply._reply_Recv(string)\n (<class 'udp_loglib.Reply'>, 'ff02300f005290031100000000241f') {}
2022-11-01 17:24:49 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (5, 1.5698564052581787) {}
2022-11-01 17:24:49 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 5, 1.57) {}
2022-11-01 17:25:00 udp_loglib.py 667 respondCheck mPrint                 Public.mPrint('set success TP Ver-3.0.5')\n ('set success TP Ver-3.0.5',) {}
2022-11-01 17:25:00 Cfg2_SwRTC_MVCU_5290.py 24 LogPath_set path_set     Log.path_set(dir_path)\n (<class 'udp_loglib.Log'>, 'f:\\Testplatform\\Master\\testplatform\\case_test\\testcase\\Sw_MVCU/Log/Cfg2_SwRTC_MVCU_5290/01') {}
2022-11-01 17:25:00 udp_loglib.py 1479 path_set mPrint         mPrint('Log path set to %s' % cls._root)\n ('Log path set to f:\\Testplatform\\Master\\testplatform\\case_test\\testcase\\Sw_MVCU\\Log\\Cfg2_SwRTC_MVCU_5290\\01/',) {}
2022-11-01 17:25:00 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 11.622564792633057) {}
2022-11-01 17:25:00 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 11.62) {}
2022-11-01 17:25:00 udp_loglib.py 1915 _wireshark_recv start                 p_new = self.wireShark.start(outfile='wireshark_recv.pcapng', block=False)\n () {'outfile': 'wireshark_recv.pcapng', 'block': False}
2022-11-01 17:25:00 wireShark.py 103 start mPrint             self.print('%s' % self.get_path(outfile))\n ('f:\\Testplatform\\Master\\testplatform\\case_test\\testcase\\Sw_MVCU\\Log\\Cfg2_SwRTC_MVCU_5290\\01/wireshark_recv.pcapng',) {}
2022-11-01 17:25:20 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (3, 20.11362934112549) {}
2022-11-01 17:25:20 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 3, 20.11) {}
2022-11-01 17:25:20 udp_loglib.py 1917 _wireshark_recv spawn                     gevent.spawn(kill_p_old, p_old)\n (<class 'udp_loglib.myGevent'>, <function TestPlatForm._wireshark_recv.<locals>.kill_p_old >, <Popen >) {}
2022-11-01 17:26:14 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 53.931225061416626) {}
2022-11-01 17:26:14 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 53.93) {}
2022-11-01 17:27:20 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 65.46573233604431) {}
2022-11-01 17:27:20 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 65.47) {}
2022-11-01 17:28:32 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 72.17823457717896) {}
2022-11-01 17:28:32 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 72.18) {}
2022-11-01 17:29:40 udp_loglib.py 1933 _mib_recv get_value                 self.mib.get_value('lruDefaultCode', outfile= 'auto_getmib.log', raise_error=False)\n ('lruDefaultCode',) {'outfile': 'auto_getmib.log', 'raise_error': False}
2022-11-01 17:29:40 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 67.9878478050232) {}
2022-11-01 17:29:40 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 67.99) {}
2022-11-01 17:29:40 FuncLog.py 34 run _get                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.1',) {'snmpip': '20.2.1.10'}
2022-11-01 17:30:53 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 72.79797053337097) {}
2022-11-01 17:30:53 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 72.8) {}
2022-11-01 17:31:54 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 61.76155710220337) {}
2022-11-01 17:31:54 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 61.76) {}
2022-11-01 17:32:55 udp_loglib.py 406 empty buzy                     buzy(count, (cur_time - temp))\n (1, 60.76846742630005) {}
2022-11-01 17:32:55 udp_loglib.py 397 buzy mPrint             Public.mPrint('block', count, round(ttime, 2))\n ('block', 1, 60.77) {}
2022-11-01 17:32:55 FuncLog.py 34 run _walk                     caller = getframeinfo(_stack[0][0])\n ('1.3.6.1.4.1.13933.100.3.2.1.4', 30) {'snmpip': '20.2.1.10'}
